import kotlin.math.ceil

val sBox = arrayOf(
    arrayOf(0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76),
    arrayOf(0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0),
    arrayOf(0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15),
    arrayOf(0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75),
    arrayOf(0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84),
    arrayOf(0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF),
    arrayOf(0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8),
    arrayOf(0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2),
    arrayOf(0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73),
    arrayOf(0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB),
    arrayOf(0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79),
    arrayOf(0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08),
    arrayOf(0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A),
    arrayOf(0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E),
    arrayOf(0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF),
    arrayOf(0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16)
)
val isBox = arrayOf(
    arrayOf( 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ),
    arrayOf( 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ),
    arrayOf( 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ),
    arrayOf( 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ),
    arrayOf( 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ),
    arrayOf( 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ),
    arrayOf( 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ),
    arrayOf( 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ),
    arrayOf( 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ),
    arrayOf( 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ),
    arrayOf( 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ),
    arrayOf( 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ),
    arrayOf( 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ),
    arrayOf( 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ),
    arrayOf( 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ),
    arrayOf( 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d )
)
val mixCol = arrayOf(
    arrayOf(0x02, 0x03, 0x01, 0x01),
    arrayOf(0x01, 0x02, 0x03, 0x01),
    arrayOf(0x01, 0x01, 0x02, 0x03),
    arrayOf(0x03, 0x01, 0x01, 0x02)
)
val invMixCol = arrayOf(
    arrayOf(0x0e, 0x0b, 0x0d, 0x09),
    arrayOf(0x09, 0x0e, 0x0b, 0x0d),
    arrayOf(0x0d, 0x09, 0x0e, 0x0b),
    arrayOf(0x0b, 0x0d, 0x09, 0x0e)
)
const val bits_128_key = "8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b"
val roundConstant = arrayOf(0,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a)
val word = Array(52){Array(4){0} }
// Convert an integer to Hex and return integer value of that hex
fun Int.throughSBox() : Int{
    var hex = Integer.toHexString(this)
    hex = padByte(hex)
    val first = hex[0].fromHexToInt()
    val second = hex[1].fromHexToInt()
    return throughSBox(first,second)
}
fun Int.throughISBox() : Int{
    var hex = Integer.toHexString(this)
    hex = padByte(hex)
    val first = hex[0].fromHexToInt()
    val second = hex[1].fromHexToInt()
    return throughISBox(first,second)
}
fun Char.fromHexToInt() : Int {
    return if(this in '0'..'9'){
        this.code - '0'.code
    }
    else
        (this.uppercaseChar() - 'A') + 10
}
fun throughSBox(leftMost : Int,rightMost : Int) : Int{
    return sBox[leftMost][rightMost]
}
fun throughISBox(leftMost : Int,rightMost : Int) : Int{
    return isBox[leftMost][rightMost]
}
fun plainTextToIntArray(plainText : String,blocks : Int) : Array<Array<Array<Int>>>{
    /* Blocks + 1 in case the plainText is perfectly distributed to block.
        In that case , the last block contains all the value of 0x10 to overcome
        the confusing with the last byte of a block being 0x01
    */

    val res = Array(blocks+1){Array(4){Array(4){0} }}
    var count = 0
    for(k in 0 until blocks){
        for(i in 0 until 4){
            for(j in 0 until 4 ){
                if(count < plainText.length){
                    res[k][i][j] = plainText[count].code
                    count++
                }
                else{
                    var a = i
                    // Store the current value of j
                    var c = j
                    while(a < 4){
                        var b = c
                        while(b < 4){
                            res[k][a][b] = 16 - plainText.length%16
                            b++
                        }
                        a++
                        // Since 'a' receives a new value , b has to be reset to 0
                        c = 0
                    }
                    return res
                }
            }
        }
    }
    for(i in 0 until 4){
        for(j in 0 until 4){
            res[blocks][i][j] = 0x10
        }
    }
    return res
}
fun intArrayToPlainText(state : Array<Array<Array<Int>>>,blocks : Int) : String{
    var res = ""
   for(k in 0 until blocks){
       if(k == blocks - 1){
           if(state[k][3][3] <= 15){
               var temp = state[k][3][3]
               var isPadded = true
               var i = 3
               var j = 3
               while(temp > 0){
                   if(state[k][i][j] != state[k][3][3]){
                       isPadded = false
                       break
                   }
                   j--
                   if(j == -1){
                       i--
                       j = 3
                   }
                   temp--
               }
               if(isPadded){
                    if(0 == state[k+1][0][0]){
                        i = 0
                        j = 0
                        temp = 0
                        while(temp < 16 - state[k][3][3]){
                            res += state[k][i][j].toChar()
                            j++
                            if(j == 4){
                                i++
                                j = 0
                            }
                            temp++
                        }
                        return res
                    }
               }
           }
       }
       for(i in 0 until 4){
           for(j in 0 until 4){
               res += state[k][i][j].toChar()
           }
       }
   }
    return res
}
// Perform n-byte circular left shift on a word
fun rotWord(word : Array<Int>,degree : Int ) : Array<Int>{
    val temp = word[0]
    for(i in 0 until 3){
        word[i] = word[i+degree]
    }
    word[3] = temp
    return word
}
fun subByte(byte : Int ) : Int{
    return byte.throughSBox()
}
fun invSubByte(byte : Int) : Int{
    return byte.throughISBox()
}
// Pad a zero in front of a one-length string to present a 2 character byte ( 0x9 -> 0x09 )
fun padByte(str : String) : String{
    var res = str
    if(str.length == 1){
        res = "0${str}"
    }
    return res
}

// Map a word using S-BOX
fun subWord(word : Array<Int>) : Array<Int>{
    for(i in 0 until 4){
        word[i] = subByte(word[i])
    }
    return word
}

// Xor the first byte of a word with the round constant
fun rCon(word : Array<Int>,round : Int) : Array<Int>{
    word[0] = word[0] xor roundConstant[round]
    return word
}
fun byteMultiplication(byte1 : Int,byte2 : Int) : Int{
    if(byte2 == 0x01) return byte1
    var res = 0
    var a = byte1
    var b = byte2
    for(i in 0 until 8){
        if(b and 0x01 == 0x01){
            res = a xor res
        }
        var temp = 0
        if(a and 0x80 == 0x80){
            temp = 0x1b
        }
        a = (a shl 1)%256 xor temp
        b = b shr 1
    }
    return res
}

// Xor a word with round key
fun xorWord(word1 : Array<Int>,word2 : Array<Int>) : Array<Int>{
    for(i in 0 until 4){
        word1[i] = word1[i] xor word2[i]
    }
    return word1
}

fun keyExpansion(){
    for(i in 0 until 6){
        for(j in 0 until 4){
            word[i][j] = "${bits_128_key[2*(4*i+j)]}${bits_128_key[2*(4*i+j)+1]}".toInt(16)
        }
    }
    for(i in 6 until 52){
        for(j in 0 until 4){
            var temp = word[i-1].clone()
            if(i%4 == 0){
                temp = rCon(subWord(rotWord(temp,1)),i/6)
            }
            word[i] = xorWord(temp,word[i-6])
        }
    }
}
fun shiftRow(state : Array<Array<Int>>) {
    // Shift column from 1 to 4
    for(i in 1 until 4){
        //Column number i is shifted i times to the left
        for(k in 0 until i){
            // Store the value of the first element of each row to temp
            val temp = state[0][i]
            for(j in 0 until 3){
                state[j][i] = state[j+1][i]
            }

            state[3][i] = temp
        }
    }
}
fun invShiftRow(state : Array<Array<Int>>){
    for(i in 1 until 4){
        for(k in 0 until i){
            val temp = state[3][i]
            for (j in 3 downTo 1){
                state[j][i] = state[j-1][i]
            }
            state[0][i] = temp
        }
    }
}
fun mixColumn(state : Array<Array<Int>>) : Array<Array<Int>>{
    val  temp = Array(4){Array(4){0} }
    for(i in 0 until 4){
        for(j in 0 until 4){
            for(k in 0 until 4){
                temp[j][i] = temp[j][i] xor byteMultiplication(mixCol[i][k],state[j][k])
            }
        }
    }
    return temp
}
fun invMixColumn(state : Array<Array<Int>>) : Array<Array<Int>>{
    val temp = Array(4){Array(4){0} }
    for(i in 0 until 4){
        for(j in 0 until 4){
            for(k in 0 until 4){
                temp[j][i] = temp[j][i] xor byteMultiplication(invMixCol[i][k],state[j][k])
            }
        }
    }
    return temp
}
fun addRoundKey(state : Array<Array<Int>>,round : Int){
    for(i in 0 until 4){
        state[i] = xorWord(state[i], word[4*round + i])
    }
}
fun subState(state : Array<Array<Int>>){
    for(i in  0 until 4){
        for(j in 0 until 4){
            state[i][j] = subByte(state[i][j])
        }
    }
}
fun invSubState(state: Array<Array<Int>>){
    for(i in  0 until 4){
        for(j in 0 until 4){
            state[i][j] = invSubByte(state[i][j])
        }
    }
}
fun displayText(text : Array<Array<Int>>) {
    for(i in 0 until 4){
        for(j in 0 until 4){
            print("${padByte(Integer.toHexString(text[j][i]))} ")
        }
        println()
    }
    println()
}
fun main() {
    keyExpansion()
    var plainText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
    val blocks = ceil(plainText.length/16.0).toInt()
    val state = plainTextToIntArray(plainText,blocks)
    //Add the first Round Key
    println("Encrypted text : ")
    for(n in 0 until blocks){
        addRoundKey(state[n],0)
        // From Round 1 to 9 perform the following step sequentially SubByte , ShiftRow , MixColumn , Add Round Key
        for (i in 1..11) {
            subState(state[n])
            shiftRow(state[n])
            state[n] = mixColumn(state[n])
            addRoundKey(state[n],i)
        }
        //For Round 10 , perform the same stages as others except MixColumn is excluded
        subState(state[n])
        shiftRow(state[n])
        addRoundKey(state[n],12)

        displayText(state[n])
    }
    println("Decrypted text : ")
    for(n in 0 until blocks){
        addRoundKey(state[n],12)
        for(i in 11 downTo 1){
            invShiftRow(state[n])
            invSubState(state[n])
            addRoundKey(state[n],i)
            state[n] = invMixColumn(state[n])
        }
        invShiftRow(state[n])
        invSubState(state[n])
        addRoundKey(state[n],0)
    }
    plainText = intArrayToPlainText(state,blocks)
    println(plainText)
}

